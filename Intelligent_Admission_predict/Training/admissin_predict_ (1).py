# -*- coding: utf-8 -*-
"""Admissin Predict @.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HpvNNqT1Vbb9v_miygShGUWOjHkTvESE

Milestone:2

Importing the Libraries
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

"""Read the Dataset"""

data = pd.read_csv('/content/Admission_Predict.csv')

"""Handling missing Values"""

data.info()

data.isnull().any()

data.head()

data=data.rename(columns = {'Chance of Admit ':'Chance of Admit'})

"""Milestone 3: Exploratory Data analysisx

Descriptive statistical
"""

data.describe

"""Visual analysis"""

sns.distplot(data['GRE Score'])

"""Bivariate analysis"""

sns.heatmap(data.corr())

sns.pairplot(data=data,hue='Research',markers=["^","v"],palette='inferno')

sns.scatterplot(x='University Rating',y='CGPA',data=data,color='Red', s=100)

category = ['GRE Score','TOEFL Score','University Rating','SOP','LOR','CGPA','Research','Chance of Admit']
color = ['Yellowgreen','gold','lightskyblue','pink','red','purple','orange','gray']
start = True
for i in np.arange(4):
     fig = plt.figure(figsize=(14,8))
     plt.subplot2grid((4,2),(i,0))
     data[category[2*i+1]].hist(color=color[2*i],bins=10)
     plt.title(category[2*i])
     plt.subplot2grid((4,2),(i,1))
     data[category[2*i+1]].hist(color=color[2*i+1],bins=10)
     plt.title(category[2*i+1])
plt.subplots_adjust(hspace = 0.7, wspace = 0.2)
plt.show()

"""Scalling the Data"""

from sklearn.preprocessing import MinMaxScaler
sc = MinMaxScaler()

x=data.iloc[:,0:7].values
x

y=data.iloc[:,7:].values
y

x=sc.fit_transform(x)
x

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.30,random_state=101)
y_train=(y_train>0.5)
y_train
y_test=(y_test>0.5)
y_test

"""Milestone 4:

Model Building
"""

from sklearn.linear_model import LogisticRegression
cls =LogisticRegression(random_state =0)

lr=cls.fit(x_train, y_train.argmax(axis=1))
y_pred =lr.predict(x_test)
y_pred

"""ANN Model"""

#libraries to train neural networks
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.layers import Dense, Activation, Dropout
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.models import Sequential

#initialize the model
model=keras.Sequential()

#Add input layer
model.add(Dense(7,activation ='relu',input_dim=7))

#Add hidden layer
model.add(Dense(7,activation='relu'))

#Add output layer
model.add(Dense(1,activation='linear'))

model.summary()

model: "sequential"

"""Testing the Model"""

model.compile(loss ='binary_crossentropy', optimizer = 'adam',metrics = ['accuracy'])

model.fit(x_train, y_train, batch_size = 20, epochs = 100)

from sklearn.metrics import accuracy_score

#make predictions on the training data
train_predictions = model.predict(x_train)

print(train_predictions)

#get the training accuracy
train_acc = model.evaluate(x_train, y_train, verbose=0)[1]

print(train_acc)

#get the test accuracy
test_acc = model.evaluate(x_test, y_test, verbose=0)[1]

print(test_acc)

pred=model.predict(x_test)
pred = (pred>0.5)
pred

y_pred = y_pred.astype(int)
y_pred

y_test = y_test.astype(int)
y_test

"""Milestone 5:

Performance Testing & Hyperparameter Tuning
"""

def logreg(x_train,x_test,y_train,y_test):
  lr = LogisticRegression(random_state=0)
  lr.fit(x_train,y_train)
  y_lr_tr = lr.predict(x_train)
  print(accuracy_score(y_lr_tr,y_train))
  ypred_lr = lr.predict(x_test)
  print(accuracy_score(y_lr_tr,y_train))
  print("***Logistic Regression***")
  print("Confusion_Matrix")
  print("Classification Report")
  print(classification_report(y_test,ypred_lr))

from sklearn.metrics import accuracy_score,recall_score,roc_auc_score,confusion_matrix
print("Accuracy score: %f" %(accuracy_score(y_test,y_pred) * 100))
print("Recall score: %f" %(recall_score(y_test,y_pred) * 100))
print("ROC score: %f\n" %(roc_auc_score(y_test,y_pred) * 100))
print(confusion_matrix(y_test,y_pred))

from sklearn.metrics import accuracy_score,recall_score,roc_auc_score,confusion_matrix
print(classification_report(y_train,y_pred))

from sklearn.metrics import accuracy_score,recall_score,roc_auc_score,confusion_matrix
print(classification_report(y_test,y_pred))

"""Milestone 6:

Model Deployment
"""

# save the model in HDF5 format
model.save('model.h5')

"""Build python code"""

import numpy as np
from flask import Flask, request, jsonify, render_template
import pickle
app = Flask(__name__)
from tensorflow.keras.models import load_model

model = load_model('model.h5')

@app.route('/')
def home():
  return render_template('Demo2.html')